import asyncio
import logging
from datetime import datetime, timezone
from typing import Dict

from databases import Database

from scripts.dev_set_db import init_db

from .config import settings
from .data_fetcher import BinanceDataFetcher
from .database.crud import DatabaseManager
from .initialize import initialize_model
from .monitor import ResidualMonitor

logger = logging.getLogger(__name__)


class CryptoMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""

    def __init__(self):
        self.data_fetcher = BinanceDataFetcher()
        self.monitor = None
        self.db_manager = None
        self.database = None
        self.beta_recalculation_task = None
        self.latest_beta = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        self.database = Database(str(settings.database_url))
        await self.database.connect()
        self.db_manager = DatabaseManager(self.database)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º beta
        await self._load_and_set_beta()

        logger.info(f"Monitor initialized with beta={self.latest_beta:.6f}")
        print(
            f"Monitoring started with beta={self.latest_beta:.6f}, "
            f"threshold={settings.price_change_threshold}%"
        )

    async def _load_and_set_beta(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç beta –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä."""
        self.latest_beta = await self.db_manager.get_latest_beta()
        if self.latest_beta is None:
            logger.warning(
                "No beta coefficient found in database. "
                "Running initialization..."
            )
            try:
                self.latest_beta = (
                    await initialize_model()
                )  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                logger.info(
                    f"Initialization completed. "
                    f"Beta set to: {self.latest_beta:.6f}"
                )
            except Exception as e:
                logger.error(f"Failed to initialize beta: {e}")
                raise

        if self.monitor:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä
            self.monitor.beta = self.latest_beta
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
            self.monitor = ResidualMonitor(
                beta=self.latest_beta,
                threshold=settings.price_change_threshold,
                window_minutes=settings.lookback_window_minutes,
            )

    async def trade_callback(self, message: Dict):
        """
        Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket.
        """
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            parsed = BinanceDataFetcher.parse_trade_message(message)
            if not parsed:
                return

            symbol = parsed["symbol"]
            price = parsed["price"]
            timestamp = datetime.fromtimestamp(parsed["timestamp"] / 1000)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ
            cumulative_epsilon = self.monitor.update_price(
                symbol, price, timestamp
            )

            if cumulative_epsilon is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
                if self.monitor.check_alert():
                    await self._trigger_alert(cumulative_epsilon, timestamp)

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ä–µ–¥–∫–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å)
                if abs(cumulative_epsilon) > settings.price_change_threshold:
                    logger.info(
                        f"{timestamp.time()}"
                        f" - Cumulative epsilon: {cumulative_epsilon:.6f}"
                    )

        except Exception as e:
            logger.error(f"Error in trade callback: {e}")

    async def _trigger_alert(
        self, cumulative_epsilon: float, timestamp: datetime
    ):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
        """
        alert_message = (
            f"\n{'=' * 80}\n"
            f"üö® ALERT: ETH independent movement detected!\n"
            f"Time: {timestamp.isoformat()}\n"
            f"Cumulative epsilon: {cumulative_epsilon:.6f}"
            f" ({cumulative_epsilon * 100:.2f}%)\n"
            f"Threshold: {self.monitor.threshold * 100:.2f}%\n"
            f"Beta: {self.monitor.beta:.6f}\n"
            f"{'=' * 80}"
        )

        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(alert_message)

        # –õ–æ–≥–∏—Ä—É–µ–º
        logger.warning(f"Alert triggered: {cumulative_epsilon:.6f}")

    async def _recalculate_beta_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç beta, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª."""
        logger.info("Starting periodic beta recalculation...")
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–π beta (–º–æ–ª–æ–∂–µ 24 —á–∞—Å–æ–≤)
                beta_data = (
                    await self.db_manager.get_latest_beta_and_timestamp()
                )
                current_time = datetime.now(timezone.utc)
                beta_is_fresh = False

                if beta_data:
                    beta_value, created_at = beta_data
                    age = (current_time - created_at).total_seconds()
                    if age < settings.beta_recalculation_interval:
                        beta_is_fresh = True
                        logger.info(
                            f"Found fresh beta: {beta_value:.6f}, "
                            f"age: {age:.0f}s"
                            f" (less than "
                            f"{settings.beta_recalculation_interval}s)"
                        )

                if not beta_is_fresh:
                    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º beta
                    logger.info(
                        "No fresh beta found or beta missing. Recalculating..."
                    )
                    new_beta = await initialize_model()
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä
                    self.latest_beta = new_beta
                    self.monitor.beta = new_beta
                    logger.info(
                        f"Beta recalculation completed: {new_beta:.6f}"
                    )
                    print(f"üîÑ Beta updated to: {new_beta:.6f}")

                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (24 —á–∞—Å–∞ –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
                await asyncio.sleep(settings.beta_recalculation_interval)

            except Exception as e:
                logger.error(f"Beta recalculation failed: {e}")
                # –ñ–¥—ë–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(3600)

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        try:
            await self.initialize()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ beta
            self.beta_recalculation_task = asyncio.create_task(
                self._recalculate_beta_periodically()
            )

            logger.info("Starting real-time monitoring...")
            print("Real-time monitoring active. Press Ctrl+C to stop.")
            print("Waiting for price data...")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
            await self.data_fetcher.connect(
                symbols=["btcusdt", "ethusdt"], callback=self.trade_callback
            )

        except asyncio.CancelledError:
            logger.info("Monitoring stopped by user")
            raise  # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º CancelledError
        except Exception as e:
            logger.error(f"Monitoring error: {e}")
            raise
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if self.beta_recalculation_task:
            self.beta_recalculation_task.cancel()
            try:
                await self.beta_recalculation_task
            except asyncio.CancelledError:
                pass

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.data_fetcher:
            await self.data_fetcher.disconnect()
        if self.database:
            await self.database.disconnect()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    await init_db()

    monitor = CryptoMonitor()
    await monitor.start_monitoring()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    )

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nMonitoring stopped by user.")
    except Exception as e:
        print(f"Application error: {e}")
        raise
