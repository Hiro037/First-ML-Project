import asyncio
import time
import pandas as pd
from src.data_fetcher import BinanceDataFetcher
from src.model import calculate_beta, calculate_returns
import numpy as np


async def benchmark_algorithm():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    async with BinanceDataFetcher() as fetcher:
        eth_data = await fetcher.fetch_historical_data('ETHUSDT', interval='5m', days=30)
        btc_data = await fetcher.fetch_historical_data('BTCUSDT', interval='5m', days=30)

    # –¢–µ—Å—Ç 1: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π
    print("1. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π:")
    start_time = time.time()
    eth_returns = calculate_returns(eth_data['close'])
    btc_returns = calculate_returns(btc_data['close'])
    returns_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(eth_returns) + len(btc_returns)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
    print(f"   ‚ö° –í—Ä–µ–º—è: {returns_time:.3f} –º—Å")
    print(f"   üéØ –°–∫–æ—Ä–æ—Å—Ç—å: {len(eth_returns) / returns_time * 1000:.0f} —Ç–æ—á–µ–∫/—Å–µ–∫")
    print()

    # –¢–µ—Å—Ç 2: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ beta
    print("2. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ beta-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞:")
    start_time = time.time()
    beta_value, eth_aligned, btc_aligned = calculate_beta(eth_data['close'], btc_data['close'])
    beta_time = (time.time() - start_time) * 1000
    print(f"   üìà Beta = {beta_value:.6f}")
    print(f"   ‚ö° –í—Ä–µ–º—è: {beta_time:.3f} –º—Å")
    print(f"   üéØ R¬≤ = {(pd.Series(btc_aligned).corr(pd.Series(eth_aligned))**2):.4f}")
    print()

    # –¢–µ—Å—Ç 3: –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    print("3. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
    test_prices = list(zip(eth_data['close'].values[-1000:], btc_data['close'].values[-1000:]))

    start_time = time.time()
    for eth_price, btc_price in test_prices:
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–∞
        eth_ret = np.log(eth_price / (eth_price - 0.1)) if eth_price > 0.1 else 0
        btc_ret = np.log(btc_price / (btc_price - 0.1)) if btc_price > 0.1 else 0
        epsilon = eth_ret - (beta_value * btc_ret)

    realtime_time = (time.time() - start_time) * 1000
    avg_time_per_tick = realtime_time / len(test_prices)

    print(f"   üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(test_prices)} —Ç–∏–∫–æ–≤")
    print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–∏–∫: {avg_time_per_tick:.6f} –º—Å")
    print(f"   üéØ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {1000 / avg_time_per_tick:.0f} —Ç–∏–∫–æ–≤/—Å–µ–∫")
    print()

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    print("4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:")
    print(f"   üìä Binance WebSocket: ~1000 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
    print(f"   ‚úÖ –ù–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º: {1000 / avg_time_per_tick:.0f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
    print(f"   üéØ –ó–∞–ø–∞—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {1000 / avg_time_per_tick / 1000:.1f}x")
    print()

    # –í—ã–≤–æ–¥—ã
    print("üéØ –í–´–í–û–î–´ –î–õ–Ø –ó–ê–©–ò–¢–´:")
    print("   ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –±–∏—Ä–∂–∏")
    print("   ‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: <0.1 –º—Å –Ω–∞ —Ç–∏–∫")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
    print("   ‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫")

if __name__ == "__main__":
    asyncio.run(benchmark_algorithm())
